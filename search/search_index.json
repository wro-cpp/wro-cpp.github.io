{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Wro.cpp!","text":"<p>We are C++ Community in Wroc\u0142aw!</p> <p>The goal of the Wro.cpp</p> <p>We want you to become successful as C++ specialist</p>"},{"location":"#how-to-be-successful-as-c-specialist","title":"How to be successful as C++ specialist?","text":"<p>I believe that C++ is just a tool that you need to know as good as any other tool. And, as with any tool, the more tools you know the powerful you are. I made an investigation in my company to learn that there are couple of areas that you should know to be an effective C++ expert. I put in on the following picture:</p> <p></p> <p>I talked about it here: Wro.cpp restart</p> <ul> <li> <p> Start your code</p> <ul> <li>command line application (CLI)</li> <li>GUI application</li> <li>static library</li> <li>dynamic library</li> <li>plugin</li> <li>static variable initialization</li> <li>run in a separate process</li> <li>run in a separate thread</li> <li>run on a remote machine</li> <li>run in virtualized environment</li> <li>docker</li> <li>sandbox</li> <li>vm</li> </ul> </li> <li> <p> Execution of your code</p> <ul> <li>configuration</li> <li>command line arguments</li> <li>environment variables</li> <li>configuration files</li> <li>persistent storage</li> <li>communication</li> <li>multithreaded</li> <li>multiprocess<ul> <li>shared memory</li> <li>circular buffers</li> <li>local sockets</li> </ul> </li> <li>Network:<ul> <li>TCP/IP</li> <li>UDP</li> <li>HTTP/HTTPS</li> </ul> </li> <li>low level<ul> <li>SPI</li> <li>UART</li> <li>CAN</li> <li>\u2026</li> </ul> </li> <li>producer-consumer <ul> <li>DDS</li> <li>MQTT</li> <li>ZeroMQ</li> </ul> </li> <li>over-The-Air Updates</li> <li>restoring the state of the app</li> </ul> </li> <li> <p> Monitor your code</p> <ul> <li>logs</li> <li>debugging</li> <li>profiling</li> <li>valgrind</li> <li>perf</li> <li>core dump</li> <li>strace</li> <li>heartbeats and watchdog</li> <li>stdout</li> <li>internal counters dumping</li> </ul> </li> <li> <p> Finish your code</p> <ul> <li>exits</li> <li>various exists</li> <li>terminate</li> <li>signals</li> <li>cleanups</li> <li>static variables cleanup</li> <li>saving the state</li> </ul> </li> <li> <p> Development Environment</p> <ul> <li>Containerization (docker)</li> <li>Continous Integration (gitlab, github)</li> <li>Documenting the project (mkdocs, C4 model, UML)</li> </ul> </li> <li> <p> C++ Language</p> <ul> <li>New standards</li> <li>New language features</li> <li>Experiments (e.g., cppfront)</li> </ul> </li> <li> <p> Lessons Learned</p> <ul> <li>Cppfront</li> <li>\u03bc(micro)/Unit Testing Framework</li> <li>Your project?</li> </ul> </li> </ul>"},{"location":"#help-us-prepare-better-content","title":"Help us prepare better content!","text":"\u0141aduj\u0119\u2026"}]}